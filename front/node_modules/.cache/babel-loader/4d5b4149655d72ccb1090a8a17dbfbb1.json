{"ast":null,"code":"var _jsxFileName = \"/Users/yanisbreton/InTheMemoryTest/front/src/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { StylesProvider } from '@material-ui/styles';\nimport axios from 'axios';\nimport { Graph } from './Graph';\nimport styles from './App.module.scss';\n\nconst App = () => {\n  const [countries, setCountries] = useState(null);\n  const [totalEarn, setTotalEarn] = useState(0);\n  const [averageRevenue, setAverageRevenue] = useState(0);\n  const [uniqueCustomersCount, setUniqueCustomersCount] = useState(0);\n  const [revenuePerMonth, setRevenuePerMonth] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:3000/countries').then(({\n      status,\n      data\n    }) => {\n      if (status === 200) {\n        setCountries(data.countries);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    axios.get('http://localhost:3000/', {\n      params: {\n        countries: selectedCountries\n      }\n    }).then(({\n      status,\n      data\n    }) => {\n      if (status === 200) {\n        setTotalEarn(Number(data.totalEarn));\n        setAverageRevenue(Number(data.averagePrice));\n        setUniqueCustomersCount(Number(data.customerAmount));\n        setRevenuePerMonth(data.revenuePerMonth.map(elem => ({\n          date: elem.date,\n          revenue: Number(elem.revenue)\n        })));\n      }\n    });\n  }, [selectedCountries]);\n  const currencyOptions = {\n    style: 'currency',\n    currency: 'EUR',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n    useGrouping: true\n  };\n  return React.createElement(Grid, {\n    className: styles.App,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(StylesProvider, {\n    injectFirst: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    alignItems: \"center\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Country\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Select, {\n    multiple: true,\n    displayEmpty: true,\n    renderValue: () => {\n      if (selectedCountries.length) {\n        return `${selectedCountries.length} countr${selectedCountries.length > 1 ? 'ies' : 'y'}`;\n      } else {\n        return 'All';\n      }\n    },\n    value: selectedCountries,\n    onChange: event => {\n      const {\n        value\n      } = event.target;\n\n      if (value.includes('AllCountries')) {\n        setSelectedCountries([]);\n      } else {\n        setSelectedCountries(value);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"AllCountries\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"All countries\"), countries && countries.map(countryName => React.createElement(MenuItem, {\n    value: countryName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, countryName))))), React.createElement(Grid, {\n    item: true,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Summary\"), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.detailsMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.detailsLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Revenue\"), React.createElement(\"div\", {\n    className: styles.detailsValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, totalEarn.toLocaleString(navigator.language, currencyOptions)))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.detailsMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.detailsLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Average revenue per order\"), React.createElement(\"div\", {\n    className: styles.detailsValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, averageRevenue.toLocaleString(navigator.language, currencyOptions)))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.detailsMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.detailsLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Customers\"), React.createElement(\"div\", {\n    className: styles.detailsValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, uniqueCustomersCount.toLocaleString(navigator.language)))))), React.createElement(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Revenue per month\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Graph, {\n    data: revenuePerMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/yanisbreton/InTheMemoryTest/front/src/App.tsx"],"names":["React","useState","useEffect","Grid","InputLabel","Select","MenuItem","StylesProvider","axios","Graph","styles","App","countries","setCountries","totalEarn","setTotalEarn","averageRevenue","setAverageRevenue","uniqueCustomersCount","setUniqueCustomersCount","revenuePerMonth","setRevenuePerMonth","selectedCountries","setSelectedCountries","get","then","status","data","params","Number","averagePrice","customerAmount","map","elem","date","revenue","currencyOptions","style","currency","minimumFractionDigits","maximumFractionDigits","useGrouping","length","event","value","target","includes","countryName","detailsMain","detailsLabel","detailsValue","toLocaleString","navigator","language"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\n\nimport { Grid, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { StylesProvider } from '@material-ui/styles';\n\nimport axios from 'axios';\n\nimport { Graph } from './Graph';\n\nimport styles from './App.module.scss';\n\nconst App = () => {\n  const [countries, setCountries] = useState(null as null | string[]);\n  const [totalEarn, setTotalEarn] = useState(0);\n  const [averageRevenue, setAverageRevenue] = useState(0);\n  const [uniqueCustomersCount, setUniqueCustomersCount] = useState(0);\n  const [revenuePerMonth, setRevenuePerMonth] = useState([] as any[]);\n\n  const [selectedCountries, setSelectedCountries] = useState([] as string[]);\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/countries').then(({status, data}) => {\n      if (status === 200) {\n        setCountries(data.countries);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/', { params: { countries: selectedCountries } }).then(({status, data}) => {\n      if (status === 200) {\n        setTotalEarn(Number(data.totalEarn));\n        setAverageRevenue(Number(data.averagePrice));\n        setUniqueCustomersCount(Number(data.customerAmount));\n        setRevenuePerMonth(data.revenuePerMonth.map((elem: any) => ({\n          date: elem.date, revenue: Number(elem.revenue)\n        })));\n      }\n    });\n  }, [selectedCountries]);\n\n  const currencyOptions = {\n    style: 'currency',\n    currency: 'EUR',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n    useGrouping: true,\n  };\n\n  return (\n    <Grid className={styles.App} container>\n      <StylesProvider injectFirst>\n      <Grid item container direction='row' alignItems='center' spacing={2}>\n        <Grid item>\n          <InputLabel>Country</InputLabel>\n        </Grid>\n        <Grid item>\n          <Select\n            multiple\n            displayEmpty\n            renderValue={() => {\n              if (selectedCountries.length) {\n                return `${selectedCountries.length} countr${selectedCountries.length > 1 ? 'ies' : 'y'}`;\n              } else {\n                return 'All';\n              }\n            }}\n            value={selectedCountries}\n            onChange={(event) => {\n              const { value } = event.target as { value: string[] };\n              if (value.includes('AllCountries')) {\n                setSelectedCountries([]);\n              } else {\n                setSelectedCountries(value);\n              }\n            }}\n          >\n            <MenuItem value='AllCountries'>All countries</MenuItem>\n            {\n              countries && countries.map(countryName => (\n                <MenuItem value={countryName}>{countryName}</MenuItem>\n              ))\n            }\n          </Select>\n        </Grid>\n      </Grid>\n      <Grid item container>\n        <h1>Summary</h1>\n        <Grid item container direction='row'>\n          <Grid item xs={4}>\n            <div className={styles.detailsMain}>\n              <div className={styles.detailsLabel}>Revenue</div>\n              <div className={styles.detailsValue}>{totalEarn.toLocaleString(navigator.language, currencyOptions)}</div>\n            </div>\n          </Grid>\n          <Grid item xs={4}>\n            <div className={styles.detailsMain}>\n              <div className={styles.detailsLabel}>Average revenue per order</div>\n              <div className={styles.detailsValue}>{averageRevenue.toLocaleString(navigator.language, currencyOptions)}</div>\n            </div>\n          </Grid>\n          <Grid item xs={4}>\n            <div className={styles.detailsMain}>\n              <div className={styles.detailsLabel}>Customers</div>\n              <div className={styles.detailsValue}>{uniqueCustomersCount.toLocaleString(navigator.language)}</div>\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item container xs={12} direction='column'>\n        <Grid item container>\n          <h1>Revenue per month</h1>\n        </Grid>\n        <Grid item>\n          <Graph data={revenuePerMonth} />\n        </Grid>\n      </Grid>\n      </StylesProvider>\n    </Grid>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}