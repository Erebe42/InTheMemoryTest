{"ast":null,"code":"\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = __importStar(require(\"fs\"));\n\nconst stream_1 = require(\"stream\");\n\nconst ParserOptions_1 = require(\"./ParserOptions\");\n\nconst CsvParserStream_1 = require(\"./CsvParserStream\");\n\n__export(require(\"./types\"));\n\nvar CsvParserStream_2 = require(\"./CsvParserStream\");\n\nexports.CsvParserStream = CsvParserStream_2.CsvParserStream;\n\nvar ParserOptions_2 = require(\"./ParserOptions\");\n\nexports.ParserOptions = ParserOptions_2.ParserOptions;\n\nexports.parse = args => new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(args));\n\nexports.parseStream = (stream, options) => stream.pipe(new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(options)));\n\nexports.parseFile = (location, options = {}) => fs.createReadStream(location).pipe(new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(options)));\n\nexports.parseString = (string, options) => {\n  const rs = new stream_1.Readable();\n  rs.push(string);\n  rs.push(null);\n  return rs.pipe(new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(options)));\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,MAAA,EAAA,GAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAGA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAAS,OAAA,CAAA,eAAA,GAAA,iBAAA,CAAA,eAAA;;AACT,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAAS,OAAA,CAAA,aAAA,GAAA,eAAA,CAAA,aAAA;;AAEI,OAAA,CAAA,KAAA,GAAuC,IAA/B,IACjB,IAAI,iBAAA,CAAA,eAAJ,CAAoB,IAAI,eAAA,CAAA,aAAJ,CAAkB,IAAlB,CAApB,CADS;;AAGA,OAAA,CAAA,WAAA,GAAc,CACvB,MADuB,EAEvB,OAFuB,KAGC,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAA,CAAA,eAAJ,CAAoB,IAAI,eAAA,CAAA,aAAJ,CAAkB,OAAlB,CAApB,CAAZ,CAHf;;AAKA,OAAA,CAAA,SAAA,GAAY,CACrB,QADqB,EAErB,OAAA,GAA6B,EAFR,KAGG,EAAE,CAAC,gBAAH,CAAoB,QAApB,EAA8B,IAA9B,CAAmC,IAAI,iBAAA,CAAA,eAAJ,CAAoB,IAAI,eAAA,CAAA,aAAJ,CAAkB,OAAlB,CAApB,CAAnC,CAHf;;AAKA,OAAA,CAAA,WAAA,GAAc,CACvB,MADuB,EAEvB,OAFuB,KAGA;AACvB,QAAM,EAAE,GAAG,IAAI,QAAA,CAAA,QAAJ,EAAX;AACA,EAAA,EAAE,CAAC,IAAH,CAAQ,MAAR;AACA,EAAA,EAAE,CAAC,IAAH,CAAQ,IAAR;AACA,SAAO,EAAE,CAAC,IAAH,CAAQ,IAAI,iBAAA,CAAA,eAAJ,CAAoB,IAAI,eAAA,CAAA,aAAJ,CAAkB,OAAlB,CAApB,CAAR,CAAP;AACH,CARY","sourceRoot":"","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __importStar(require(\"fs\"));\nconst stream_1 = require(\"stream\");\nconst ParserOptions_1 = require(\"./ParserOptions\");\nconst CsvParserStream_1 = require(\"./CsvParserStream\");\n__export(require(\"./types\"));\nvar CsvParserStream_2 = require(\"./CsvParserStream\");\nexports.CsvParserStream = CsvParserStream_2.CsvParserStream;\nvar ParserOptions_2 = require(\"./ParserOptions\");\nexports.ParserOptions = ParserOptions_2.ParserOptions;\nexports.parse = (args) => new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(args));\nexports.parseStream = (stream, options) => stream.pipe(new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(options)));\nexports.parseFile = (location, options = {}) => fs.createReadStream(location).pipe(new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(options)));\nexports.parseString = (string, options) => {\n    const rs = new stream_1.Readable();\n    rs.push(string);\n    rs.push(null);\n    return rs.pipe(new CsvParserStream_1.CsvParserStream(new ParserOptions_1.ParserOptions(options)));\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}